<%@ Template Language="C#" TargetLanguage="Java" Inherits="CodeTemplate" ResponseEncoding="utf-8" Description="根据一张数据表生成实体类"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%-- 数据表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Category="DB" Optional="False"%>
<%@ Property Name="packageName" Default="cn.lsieun.knowthyself.service.impl" Category="Java" Type="System.String" Optional="True"%>
<!-- #include file="../zealous_common/CommonScript.cst" -->
<% string clazzName = processUnderScoreName(Table.Name, "tb_", ""); %>
package <%= packageName %>;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.lsieun.knowthyself.dao.<%= clazzName %>Dao;
import cn.lsieun.knowthyself.dto.<%= clazzName %>DTO;
import cn.lsieun.knowthyself.dto.ValidationDTO;
import cn.lsieun.knowthyself.entity.<%= clazzName %>;
import cn.lsieun.knowthyself.exception.<%= clazzName %>Exception;
import cn.lsieun.knowthyself.service.<%= clazzName %>Service;
import cn.lsieun.knowthyself.util.page.PageUtil;
import cn.lsieun.knowthyself.util.snowflake.SnowflakeIdWorker;


@Service("<%= getCamelCaseName(clazzName) %>Service")
public class <%= clazzName %>ServiceImpl implements <%= clazzName %>Service{

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());
    private final Gson gson = new GsonBuilder().serializeNulls().setPrettyPrinting().create();
    
    @Autowired
    private SnowflakeIdWorker snowflakeIdWorker;    

    @Autowired 
    private <%= clazzName %>Dao dao; 

    @Override
    public <%= clazzName %>DTO add<%= clazzName %>(<%= clazzName %> <%= getCamelCaseName(clazzName) %>) {
        /*
        处理思路：
        （1）进行数据有效性检验
        （2）将数据添加到数据库中
        （3）将结果进行返回
        * */
        // region （1）进行数据有效性检验
        ValidationDTO validationDTO = validate(<%= getCamelCaseName(clazzName) %>, true);
        if(validationDTO.isSuccess() == false) throw new <%= clazzName %>Exception(validationDTO.getErrMsg());
        // endregion

        // region （2）将数据添加到数据库中
        long sid = snowflakeIdWorker.nextId();
        String uid = String.valueOf(sid);
        <%= getCamelCaseName(clazzName) %>.setUid(uid);

        int effectedNum = dao.insert(<%= getCamelCaseName(clazzName) %>);
        if(effectedNum != 1) throw new <%= clazzName %>Exception("操作失败，数据库出错啦！");
        // endregion

        // region （3）将结果进行返回
        <%= clazzName %>DTO dto = entity2DTO(<%= getCamelCaseName(clazzName) %>);
        return dto;
        // endregion
    }
	 
	@Override
    public boolean modify<%= clazzName %>(<%= clazzName %> <%= getCamelCaseName(clazzName) %>) {
        /*
        处理思路：
        （1）进行数据有效性检验
        （2）将数据更新到数据库中
        （3）将结果进行返回
        * */

        // region （1）进行数据有效性检验
        ValidationDTO validationDTO = validate(<%= getCamelCaseName(clazzName) %>, false);
        if(validationDTO.isSuccess() == false) throw new <%= clazzName %>Exception(validationDTO.getErrMsg());
        // endregion

        // region （2）将数据更新到数据库中
        <%= getCamelCaseName(clazzName) %>.setLastEditTime(new Date());
        int effectedNum = dao.update(<%= getCamelCaseName(clazzName) %>);
        if(effectedNum != 1) throw new <%= clazzName %>Exception("操作失败，数据库出错啦！");
        // endregion

        // region （3）将结果进行返回
        return true;
        // endregion
	}

	@Override
	public <%= clazzName %>DTO get<%= clazzName %>(String uid) {
        <%= clazzName %> <%= getCamelCaseName(clazzName) %> = dao.getById(uid);
        <%= clazzName %>DTO dto = entity2DTO(<%= getCamelCaseName(clazzName) %>);
        return dto;
	}
    
    @Override
    public boolean delete(String uid) {
        <%= clazzName %> <%= getCamelCaseName(clazzName) %> = new <%= clazzName %>();
        <%= getCamelCaseName(clazzName) %>.setUid(uid);
        <%= getCamelCaseName(clazzName) %>.setIsValid(0);
        int effectedNum = dao.update(<%= getCamelCaseName(clazzName) %>);
        if(effectedNum != 1) return false;
        return true;
    }    

	@Override
	public List<<%= clazzName %>DTO> getList(Map<String,String> queryMap) {
        List<<%= clazzName %>> <%= getCamelCaseName(clazzName) %>List = dao.getList(queryMap);
        List<<%= clazzName %>DTO> dtoList = entityList2DTOList(<%= getCamelCaseName(clazzName) %>List);
        return dtoList;
	}

	@Override
    public int getCount(Map<String,String> queryMap) {
        return dao.getCount(queryMap);
	}
      
    @Override
    public <%= clazzName %>DTO entity2DTO(<%= clazzName %> entity) {
        <%= clazzName %>DTO dto = new <%= clazzName %>DTO();
        try {
            PropertyUtils.copyProperties(dto,entity);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return dto;
    }

    @Override
    public List<<%= clazzName %>DTO> entityList2DTOList(List<<%= clazzName %>> entityList) {
        if(entityList == null) return null;
        List<<%= clazzName %>DTO> dtoList = new ArrayList<<%= clazzName %>DTO>();
        for(<%= clazzName %> entity : entityList){
            <%= clazzName %>DTO dto = entity2DTO(entity);
            dtoList.add(dto);
        }
        return dtoList;
    }

    //TODO: 用户里也改成这样吧。
    @Override
    public ValidationDTO validate(<%= clazzName %> <%= getCamelCaseName(clazzName) %>, boolean isCreate) {
        String operation = (isCreate)?("添加"):("更新");
        String errMsg = "";
        if(<%= getCamelCaseName(clazzName) %> == null)
        {
            errMsg = operation + "操作失败，对象不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(isCreate && StringUtils.isNotBlank(<%= getCamelCaseName(clazzName) %>.getUid())){
            errMsg = "创建操作失败，主键ID不为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(!isCreate && StringUtils.isBlank(<%= getCamelCaseName(clazzName) %>.getUid())){
            errMsg = "更新操作失败，主键ID不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(StringUtils.isBlank(<%= getCamelCaseName(clazzName) %>.getUserid())) {
            errMsg = operation + "操作失败，用户ID不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(StringUtils.isBlank(<%= getCamelCaseName(clazzName) %>.getName())) {
            errMsg = operation + "操作失败，任务名称不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(<%= getCamelCaseName(clazzName) %>.getStartTime() == null){
            errMsg = operation + "操作失败，开始时间不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(<%= getCamelCaseName(clazzName) %>.getEndTime() == null){
            errMsg = operation + "操作失败，结束时间不能为空！";
            return new ValidationDTO(false,errMsg);
        }
        if(<%= getCamelCaseName(clazzName) %>.getStartTime().after(task.getEndTime())){
            errMsg = operation + "操作失败，开始时间不能晚于结束时间！";
            return new ValidationDTO(false,errMsg);
        }

        return new ValidationDTO(true,errMsg);
    }

}
