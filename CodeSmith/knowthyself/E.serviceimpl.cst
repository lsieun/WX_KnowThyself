<%@ Template Language="C#" TargetLanguage="Java" Inherits="CodeTemplate" ResponseEncoding="utf-8" Description="根据一张数据表生成实体类"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%-- 数据表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Category="DB" Optional="False"%>
<%@ Property Name="packageName" Default="cn.lsieun.knowthyself.service.impl" Category="Java" Type="System.String" Optional="True"%>
<!-- #include file="../zealous_common/CommonScript.cst" -->
<% string clazzName = processUnderScoreName(Table.Name, "tb_", ""); %>
package <%= packageName %>;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.lsieun.knowthyself.dao.<%= clazzName %>Dao;
import cn.lsieun.knowthyself.dto.<%= clazzName %>DTO;
import cn.lsieun.knowthyself.dto.ValidationDTO;
import cn.lsieun.knowthyself.entity.<%= clazzName %>;
import cn.lsieun.knowthyself.exception.<%= clazzName %>Exception;
import cn.lsieun.knowthyself.service.<%= clazzName %>Service;
import cn.lsieun.knowthyself.util.page.PageUtil;
import cn.lsieun.knowthyself.util.snowflake.SnowflakeIdWorker;


@Service("<%= getCamelCaseName(clazzName) %>Service")
public class <%= clazzName %>ServiceImpl implements <%= clazzName %>Service{

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());
    private final Gson gson = new GsonBuilder().serializeNulls().setPrettyPrinting().create();
    
    @Autowired
    private SnowflakeIdWorker snowflakeIdWorker;    

    @Autowired 
    private <%= clazzName %>Dao dao; 

    @Override
    public <%= clazzName %>DTO get<%= clazzName %>(String uid) {
        <%= clazzName %> <%= getCamelCaseName(clazzName) %> = dao.getById(uid);
        <%= clazzName %>DTO dto = entity2DTO(<%= getCamelCaseName(clazzName) %>);
        return dto;
    }

    @Override
    public TaskDTO create<%= clazzName %>(<%= clazzName %> <%= getCamelCaseName(clazzName) %>) {
        /*
        处理思路：
        （1）进行数据有效性检验
        （2）将数据添加到数据库中
        （3）将结果进行返回
        * */
        // region （1）进行数据有效性检验
        ValidationDTO validationDTO = validate(<%= getCamelCaseName(clazzName) %>, true);
        if(validationDTO.isSuccess() == false) throw new <%= clazzName %>Exception(validationDTO.getErrMsg());
        // endregion

        // region （2）将数据添加到数据库中
        long sid = snowflakeIdWorker.nextId();
        String uid = String.valueOf(sid);
        task.setUid(uid);

        int effectedNum = dao.insert(<%= getCamelCaseName(clazzName) %>);
        if(effectedNum != 1) throw new <%= clazzName %>Exception("操作失败，数据库出错啦！");
        // endregion

        // region （3）将结果进行返回
        <%= clazzName %>DTO dto = entity2DTO(<%= getCamelCaseName(clazzName) %>);
        return dto;
        // endregion
    }
	 
	@Override
    public boolean modify<%= clazzName %>(<%= clazzName %> <%= getCamelCaseName(clazzName) %>) {
        /*
        处理思路：
        （1）进行数据有效性检验
        （2）将数据更新到数据库中
        （3）将结果进行返回
        * */

        // region （1）进行数据有效性检验
        ValidationDTO validationDTO = validate(<%= getCamelCaseName(clazzName) %>, false);
        if(validationDTO.isSuccess() == false) throw new <%= clazzName %>Exception(validationDTO.getErrMsg());
        // endregion

        // region （2）将数据更新到数据库中
        <%= getCamelCaseName(clazzName) %>.setLastEditTime(new Date());
        int effectedNum = dao.update(<%= getCamelCaseName(clazzName) %>);
        if(effectedNum != 1) throw new <%= clazzName %>Exception("操作失败，数据库出错啦！");
        // endregion

        // region （3）将结果进行返回
        return true;
        // endregion
	}

	@Override
	public <%= clazzName %>DTO getById(String uid) {
        Task task = dao.getById(uid);
        TaskDTO dto = entity2DTO(task);
        return dto;
	}

	@Override
	public List<<%= clazzName %>DTO> getList(Map<String,String> queryMap) {
        List<Task> taskList = dao.getList(queryMap);
        List<TaskDTO> dtoList = entityList2DTOList(taskList);
        return dtoList;
	}

	@Override
    public int getCount(Map<String,String> queryMap) {
        return dao.getCount(queryMap);
	}
    
    @Override
    public BaseResponseObject getXXX(Map paramMap) {
        BaseResponseObject responseObject = new BaseResponseObject(Boolean.FALSE,"","");
        // region log
        if(LOGGER.isInfoEnabled()) {
            LOGGER.info("<%= clazzName %>ServiceImpl==>getXXX==>paramMap: " + gson.toJson(paramMap));
        }
        // endregion        
        try
        {
            /*
            （1）读取输入参数
            （2）对参数进行校验；如果不合法，则提前返回
            （3）处理业务逻辑
             */
             
            // region (1) 检查参数，如果不合法，则提前返回
            String customerId = StringTool.getMapString(paramMap, "customerId");     //必传参数，否则提前返回
            String customerName = StringTool.getMapString(paramMap, "customerName"); //必传参数，否则提前返回
            String title = StringTool.getMapString(paramMap, "title");
            String notice = StringTool.getMapString(paramMap, "notice");
            String type = StringTool.getMapString(paramMap, "type"); //必传参数，直播类型(1-手术直播，2-学术会议，3-产品推荐，4-器械操作，5-手术解说，6-病例讨论)
            String startTime = StringTool.getMapString(paramMap, "startTime"); //必传参数，否则提前返回
            String endTime = StringTool.getMapString(paramMap, "endTime"); //必传参数，否则提前返回
            String visitSiteId = StringTool.getMapString(paramMap, "visitSiteId"); //FIXME: 是否考虑了站点信息
            // endregion

            // region （2）参数有效性校验，如果不合法，则提前返回
            if(StringUtils.isBlank(customerId)){
                responseObject.setResponseStatus(Boolean.FALSE);
                responseObject.setResponseCode("NO");
                responseObject.setResponseMessage("customerId不能为空");
                // region log
                if(LOGGER.isInfoEnabled()) {
                    LOGGER.info("PersonalLivePlanServiceImpl===>getXXX==>responseObject==>" + gson.toJson(responseObject));
                }
                // endregion
                return responseObject;
            }
            // endregion             
            Long primaryKeyId = System.currentTimeMillis();
			paramMap.put("xxxId", primaryKeyId); //FIXME: RK这里需要修改XXX          
            // region log
            if(LOGGER.isInfoEnabled()) {
                LOGGER.info("<%= clazzName %>ServiceImpl===>getXXX==>paramMap==>" + gson.toJson(paramMap));
            }
            // endregion
            
            Long count = dao.insert(paramMap);
            Long pkId = Long.parseLong(StringTool.getMapString(paramMap, "id"));
            // region log
            if(LOGGER.isInfoEnabled()) {
                LOGGER.info("<%= clazzName %>ServiceImpl==>getXXX==>count: " + count);
                LOGGER.info("<%= clazzName %>ServiceImpl==>getXXX==>pkId: " + pkId);
            }
            // endregion
            responseObject.setResponsePk(pkId);
			responseObject.setResponseMessage("SUCCESS");
			responseObject.setResponseStatus(Boolean.TRUE);
        } catch (Exception ex){
            LOGGER.error("<%= clazzName %>ServiceImpl===>getXXX==>Exception==>", ex);
            responseObject.setResponseMessage("ERROR");
			responseObject.setResponseStatus(Boolean.FALSE);
        }
        // region log
        if(LOGGER.isInfoEnabled()) {
            LOGGER.info("<%= clazzName %>ServiceImpl===>getXXX==>responseObject==>" + gson.toJson(responseObject));
        }
        // endregion
        return responseObject;
    }    

}
