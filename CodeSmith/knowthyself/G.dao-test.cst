<%@ Template Language="C#" TargetLanguage="Java" Inherits="CodeTemplate" ResponseEncoding="utf-8" Description="根据一张数据表生成实体类"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%-- 数据表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Category="Database" Optional="False"%>
<%@ Property Name="packageName" Default="cn.lsieun.knowthyself.dao" Category="package" Type="System.String" %>
<!-- #include file="../zealous_common/CommonScript.cst" -->
<% string clazzName = processUnderScoreName(Table.Name, "tb_", ""); %>
package <%= packageName %>;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import cn.lsieun.knowthyself.entity.<%= clazzName %>;
import cn.lsieun.knowthyself.util.json.JSONUtil;
import cn.lsieun.knowthyself.util.snowflake.SnowflakeIdWorker;


@RunWith(SpringRunner.class)
@SpringBootTest
@FixMethodOrder(MethodSorters.NAME_ASCENDING) // 按方法名大小升序执行
public class <%= clazzName %>DaoTest{

    private static long snowflakeId;
    @Autowired
    private SnowflakeIdWorker snowflakeIdWorker;

    private static Map<String,String> queryMap;

	@Autowired
	private <%= clazzName %>Dao dao;
    
    @BeforeClass
    public static void beforeClass(){
        queryMap = new HashMap<String,String>();
    }
    
    @AfterClass
    public static void afterClass(){
        System.out.println("snowflakeId = " + snowflakeId);
    }    
	
	@Before
	public void setUp(){
	}
    
	@After
	public void tearDown() throws Exception {
	}    
	
	@Test
	public void testAInsert() {
        String uid = String.valueOf(snowflakeId);
        <%= clazzName %> entity = new <%= clazzName %>();
        entity.setUid(uid);
        <% foreach(ColumnSchema col in Table.Columns) {%>
        <% string fieldType = GetJavaVariableType(col); %>
        <% string fieldName = getFieldName(col.Name); %>
        <% string getterName = getGetterName(col.Name); %>
        <% string setterName = getSetterName(col.Name); %>
        entity.<%= setterName %>("<%= fieldName %>");
        <%} %>    
		
		int effectedNum = dao.insert(entity);
        assertEquals(1,effectedNum);
	}

	@Test
	public void testBUpdate() {
        String uid = String.valueOf(snowflakeId);
        <%= clazzName %> entity = new <%= clazzName %>();    
        <% foreach(ColumnSchema col in Table.Columns) {%>
        <% string fieldType = GetJavaVariableType(col); %>
        <% string fieldName = getFieldName(col.Name); %>
        <% string getterName = getGetterName(col.Name); %>
        <% string setterName = getSetterName(col.Name); %>
        entity.<%= setterName %>("<%= fieldName %>");
        <%} %>   		
        
        int effectedNum = dao.update(entity);
        assertEquals(1,effectedNum);
	}

	@Test
	public void testCGetById() {
        String uid = String.valueOf(snowflakeId);
		<%= clazzName %> entity = dao.getById(uid);
		
		assertEquals(testString, entity.getUname());

        System.out.println(JSONUtil.getJsonString(entity));
	}

	@Test
	public void testGetDList() {
		String uid = String.valueOf(snowflakeId);
        queryMap.put("uid",uid);
        queryMap.put("isValid","1");
        queryMap.put("firstResult","0");
        queryMap.put("maxResult","10");
        
		List<<%= clazzName %>> list = dao.getList(queryMap);
        
		assertEquals(1,list.size());
        System.out.println(JSONUtil.getJsonString(list));
	}

    @Test
    public void testEGetCount(){
        String uid = String.valueOf(snowflakeId);
        queryMap.put("uid",uid);
        queryMap.put("isValid","1");
        queryMap.put("firstResult","0");
        queryMap.put("maxResult","10");
        int count = dao.getCount(queryMap);
        assertEquals(1, count);
    }
    
    @Test
    public void testFDelete(){
        String uid = String.valueOf(snowflakeId);
        int effectedNum = dao.delete(uid);
        assertEquals(1,effectedNum);
    }    
}
